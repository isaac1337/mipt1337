class Graph:
    def __init__(self, size):
        self.adjMatrix = [[0 for _ in range(size)] for _ in range(size)]
        self.size = size

    def add_edge(self, v1, v2):
        self.adjMatrix[v1][v2] = 1

    def is_ancestor(self, v, u):
        order = self.topological_sort()
        return order.index(v) < order.index(u)

    def topological_sort(self):
        visited = [False] * self.size
        stack = []
        for i in range(self.size):
            if not visited[i]:
                self.topo_sort_util(i, visited, stack)
        return stack

    def topo_sort_util(self, v, visited, stack):
        visited[v] = True
        for i in range(self.size):
            if self.adjMatrix[v][i] == 1 and not visited[i]:
                self.topo_sort_util(i, visited, stack)
        stack.insert(0, v)


n, m = map(int, input().split())
graph = Graph(n)
for _ in range(m):
    v1, v2 = map(int, input().split())
    graph.add_edge(v1 - 1, v2 - 1)

q = int(input())
for _ in range(q):
    v, u = map(int, input().split())
    print(graph.is_ancestor(v - 1, u - 1))
